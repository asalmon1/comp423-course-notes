{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Audrey's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust!","text":"<ul> <li>Primary author: Audrey Salmon</li> <li>Reviewer: Katie Brown</li> </ul>"},{"location":"tutorials/rust-setup/#introduction","title":"Introduction","text":"<p>In the following tutorial, you'll learn how to set up a simple project from scratch in the Rust programming language. You don't need to know anything about Rust to complete this tutorial - in fact, you don't even need it installed on your host computer! </p> <p>Instead, we will be using a development environment (Dev Container) running Rust. Dev Containers create a stable development environment, especially when you're using a new programming language, by making sure all collaborators have the same language version and extensions installed. This solves many industry issues, which is why it is so valuable that you are learning to set one up today!</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have the following software installed on your host computer:</p> <ul> <li>Visual Studio Code (VSCode) with the Remote - Containers extension</li> <li>Docker</li> <li>Git</li> </ul> <p>Warning</p> <p>Do not install any additional software onto your host computer. The dev container will handle all dependencies.</p>"},{"location":"tutorials/rust-setup/#step-1-create-a-blank-directory-initialize-git","title":"Step 1: Create a Blank Directory &amp; Initialize Git","text":"<ol> <li>Open your terminal.</li> <li>Create a new directory for your project:    <pre><code>mkdir rust-project\ncd rust-project\n</code></pre></li> <li>Initialize your git repository:     <pre><code>git init\n</code></pre></li> <li>Add a README and create your first commit:     <pre><code>echo \"# COMP423 EX00 Rust Tutorial\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ol> <p>Now we're going to link our local repository to a remote repository.</p> <ol> <li> <p>Open GitHub and navigate to the Create a New Repository page</p> </li> <li> <p>Fill in the details as follows:</p> <ul> <li>Repository Name: rust-project</li> <li>Description: \"Setting up a Rust Dev Container for COMP423 EX00.\"</li> <li>Visibility: Public</li> </ul> </li> <li> <p>Click Create Repository</p> </li> <li> <p>Now go back to your terminal and add this repository as a remote: <pre><code>git remote add origin https://github.com/your-username/rust-project.git\n</code></pre></p> </li> </ol> <p>Make sure to replace your-username with your GitHub username!</p> <ol> <li>Push your local commits to the remote: <pre><code>git push --set-upstream origin main\n</code></pre></li> </ol> <p>Warning</p> <p>Make sure your default branch is named <code>main</code> using the subcommand <code>git branch</code>. Older versions of <code>git</code> name the default branch <code>master</code>. If this is the case, you can rename it to <code>main</code> by running the command <code>git branch -M main</code>.</p>"},{"location":"tutorials/rust-setup/#step-2-configure-your-dev-container","title":"Step 2: Configure Your Dev Container","text":"<ol> <li>In VSCode, open your <code>rust-project</code> directory. You can do this from the menu bar via File &gt; Open....</li> <li>Inside the project directory, create the <code>.devcontainer</code> folder.</li> <li> <p>Create a file named <code>devcontainer.json</code> inside the <code>.devcontainer</code> folder, and add the following content:     .devcontainer/devcontainer.json<pre><code>{\n    \"name\": \"Rust Dev Container\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"features\": {},\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"tutorials/rust-setup/#parts-of-the-devcontainerjson-file","title":"Parts of the <code>devcontainer.json</code> file","text":"<ul> <li><code>name</code>: Sets the name of the container. This is especially important if you have more than one development environment, so you can differentiate between your various configurations.</li> <li><code>image</code>: If you wanted to customize your container more, you could provide the path to a <code>Dockerfile</code> here. To make this tutorial easier, we are using a prebuilt container image from Microsoft that provides us with the latest version of Rust.</li> <li><code>customizations.vscode.extensions</code>: Ensures that the <code>rust-analyzer</code> VSCode plugin is installed. Adding extensions here makes sure that other developers on your project have them installed in their dev containers automatically.</li> </ul>"},{"location":"tutorials/rust-setup/#step-3-build-and-open-your-dev-container","title":"Step 3: Build and Open Your Dev Container","text":"<ol> <li>Ensure that you still have the project directory open in VSCode.</li> <li>Use the Command Palette (<code>Ctrl+Shift+P</code> or View &gt; Command Palette from the menu bar) and select Dev Containers: Reopen in Container.</li> <li>Wait for the container to start. This may take a few minutes.</li> </ol>"},{"location":"tutorials/rust-setup/#step-4-check-your-environment","title":"Step 4: Check Your Environment","text":"<p>Once the Dev Container starts, check that <code>rustc</code> is installed.</p> <ol> <li>Open a terminal in VSCode (Terminal &gt; New Terminal from the menu bar).</li> <li>Run <code>rustc --version</code>. If a recent version of Rust is printed, you're good to go!</li> </ol> <p>Version</p> <p>As of 1/26/2025, the latest version should be 1.83.0</p>"},{"location":"tutorials/rust-setup/#step-5-create-a-rust-project","title":"Step 5: Create a Rust Project","text":"<ol> <li> <p>Create a new Rust project:     <pre><code>cargo new hello_comp423 --vcs none\n</code></pre></p> <p>--vcs Flag</p> <p>The <code>--vcs none</code> flag tells Cargo not to create a new Git repository when setting up the project.</p> <p>This creates a folder called <code>hello_comp423</code> with the following structure:     <pre><code>hello_comp423/\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 main.rs\n</code></pre></p> </li> <li> <p>Navigate into your project directory using the VSCode explorer.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#parts-of-your-project-folder","title":"Parts of your project folder","text":"<ul> <li><code>Cargo.toml</code>: The project configuration file. You don't have to edit this.</li> <li><code>src/main.rs</code>: The entry point of your program.</li> </ul> <p>What is Cargo?</p> <p>Cargo is the Rust build system and package manager.</p>"},{"location":"tutorials/rust-setup/#step-6-write-your-rust-program","title":"Step 6: Write Your Rust Program","text":"<p>Open <code>src/main.rs</code> and replace its contents with:     src/main.rs<pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre></p>"},{"location":"tutorials/rust-setup/#parts-of-a-rust-program","title":"Parts of a Rust program","text":"<ul> <li><code>fn main()</code>: This defines the main function, the entry point of a Rust program.</li> <li><code>println!</code>: This is a Rust macro (indicated by the <code>!</code>) which prints formatted text to the console, and automatically appends a newline to the end.</li> <li><code>\"Hello COMP423\"</code>: This is a string literal passed as an argument to <code>println!</code>.</li> </ul> <p>For more information on writing programs in Cargo, see the Cargo documentation.</p>"},{"location":"tutorials/rust-setup/#step-7-build-and-run-your-project","title":"Step 7: Build and Run Your Project","text":"<p>You have two different options to run your project. Before you run any commands, make sure you cd into your <code>hello_comp423</code> directory. </p> <p>In the terminal: <pre><code>cd hello_comp423\n</code></pre></p>"},{"location":"tutorials/rust-setup/#option-1-building-then-running-the-project","title":"Option 1: Building, then running the project","text":"<ol> <li>To build the project first, run <code>cargo build</code> in your terminal.<ul> <li>This command compiles the program and puts the output in the <code>target/debug</code> directory.</li> <li>Compare this to running <code>gcc -o program program.c</code>, which allows you to explicitly name the output file when compiling a C program.</li> </ul> </li> <li>Run the binary:     <pre><code>./target/debug/hello_comp423\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#option-2-running-the-project-directly","title":"Option 2: Running the project directly","text":"<p>Use the <code>cargo run</code> command to build and run the project in one step.</p> <ul> <li>This command compiles and immediately executes the program, which saves you an extra step!</li> </ul> <p>Regardless of which method you choose, you should see the output:</p> <pre><code>Hello COMP423\n</code></pre>"},{"location":"tutorials/rust-setup/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully set up your development environment, built a Rust project, and ran your program. </p> <p>Referenced MkDocs Tutorial by Kris Jordan</p>"}]}